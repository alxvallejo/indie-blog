datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  question Question[]
  profile  Profile?
}

model Profile {
  id    String @id @default(cuid())
  name String
  bio String

  score Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Category {
  id    String @id @default(cuid())
  title String @unique
  color String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]
}

model Choice {
  id     String  @id @default(cuid())
  title  String
  answer Boolean @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?
}

model Question {
  id    String @id @default(cuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  choices Choice[]

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
